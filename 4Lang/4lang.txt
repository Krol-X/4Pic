# 4lang *v.0.1*

## Common functions
```
COMPILER ( (env) source -> code )
EXECUTER ( env code pic -> newpic )
```

## Language primitives ( can't useable by user )
branch  ( t: addr    -- IP=addr )
?branch ( f; t: addr -- f{IP=addr | IP=IP+2} )

## Language functions
```Forth
( comment ) \ line comment

\ Mathemathic constants
E LOG2E LOG10E LN2 LN10
PI PI^2 PI^4
1/PI 2/PI 2!PI !2 !1/2

\ Mathemathic functions
+      ( a b   -- a+b )              .
-      ( a b   -- a-b )              .
*      ( a b   -- a*b )              .
/%     ( a b   -- a%b a/b )          .
and    ( a b   -- a&b )              .
or     ( a b   -- a|b )              .
xor    ( a b   -- a^b )              .
sin    ( x     -- sin {a} )
cos    ( x     -- cos {a} )
exp    ( x     -- e^x )
log    ( x     -- log {x, e} )
log10  ( x     -- log {x, 10} )
^      ( a b   -- power {a, b} )     .
!      ( a b   -- power {a, 1/b} )
ceil   ( x     -- ceil {x} ) \ round .
floor  ( x     -- floor {x} )        .
min    ( a b   -- min {a, b} )
max    ( a b   -- max {a, b} )
within ( x a b -- f )                .
not    ( x     -- -x )               .
abs    ( x     -- |x|)               .

\ Stack functions
dropall  ( ?   -- )                  .
sdropall ( ?   -- )                  ?
drop   ( x     -- )                  .
nip    ( a b   -- b )
dup    ( x     -- x )                .
?dup   ( x f   -- x x? )             .
swap   ( a b   -- b a )              .
rot    ( a b c -- b c a )            .
over   ( a b   -- a b a )
tuck   ( a b   -- b a b )
pick   ( An i*x n -- An i*x An )     .
roll   ( An i*x n -- i*x An )        .
sdrop  ( s: x  -- s: )               .
>s     ( x     -- s: x )             .
s>     ( s: x  -- x    )             .
s@     ( s: x  -- x  s: x )          .

\ Struct-programming functions
if else then



```
